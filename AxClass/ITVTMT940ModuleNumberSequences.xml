<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ITVTMT940ModuleNumberSequences</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// ITVT MT940
/// 
/// Number Sequences
/// </summary>
public class ITVTMT940ModuleNumberSequences extends NumberSeqApplicationModule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>numberSeqModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Configures all the data types that are being used by the module.
    /// </summary>

    /*
    Detailed description of how to setup references for number sequences can
    be found in method loadModule() on the 'father' class: NumberSeqApplicationModule.
    */

    /// <summary>
    ///    Retrieves the ID of the application-specific module for this class.
    /// </summary>
    /// <returns>
    ///    The module-specific ID.
    /// </returns>
    public NumberSeqModule numberSeqModule()
    {
        return NumberSeqModule::ITVTMT940;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Method to create new number sequences for datatypes
    /// </summary>
    protected void loadModule()
    {
        NumberSeqDatatype datatype = NumberSeqDatatype::construct();

        datatype.parmDatatypeId(extendedTypeNum(ITVTMT940ImportHistoryId));
        datatype.parmReferenceLabel(literalStr("@ITVTMT940:ImportHistoryId"));
        datatype.parmReferenceHelp(literalStr("@ITVTMT940:ImportHistoryIdHelp"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardFetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmIsGroupEnabled(NoYes::Yes);
        datatype.parmSortField(11);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

    }

]]></Source>
			</Method>
			<Method>
				<Name>buildModulesMapSubscriber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Appends the current class to the map that links modules to number sequence data type generators.
    /// </summary>
    [SubscribesTo(classstr(NumberSeqGlobal),delegatestr(NumberSeqGlobal,buildModulesMapDelegate))]
    static void buildModulesMapSubscriber(Map _numberSeqModuleNamesMap)
    {
        NumberSeqGlobal::addModuleToMap(classnum(ITVTMT940ModuleNumberSequences), _numberSeqModuleNamesMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefImportHistoryId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     New number sequence reference
    /// </summary>
    /// <returns><c>NumberSequenceReference</c></returns>
    public static NumberSequenceReference numRefImportHistoryId()
    {
        NumberSeqScope scope = NumberSeqScopeFactory::createDataAreaScope(curext());
        return NumberSeqReference::findReference(extendedtypenum(ITVTMT940ImportHistoryId), scope);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>